package mscheme.values.functions;

/* --- DON'T EDIT --- */
/* this file is generated by MScheme.values.functions.ParseBuiltins */

import java.io.Writer;
import java.io.IOException;

import mscheme.util.Arity;

import mscheme.Value;
import mscheme.Code;

import mscheme.values.*;
import mscheme.machine.Registers;

import mscheme.exceptions.*;


class BuiltinRaw
    extends    Function
    implements BuiltinTable
{
    public final static String id
        = "$Id$";


    private final int    _id;
    private final String _name;

    BuiltinRaw(int id, String name)
    { _id = id; _name = name; }

    public String getName() { return _name; }

    public Function getFunc() { return this; }

    public void write(Writer destination)
        throws IOException
    {
        destination.write(
            "#[primitive " + _id + ": " + _name + "]"
        );
    }

    protected Value checkedCall(List args)
        throws SchemeException
    {
        switch(_id) {
        case 1: // list
            return Builtins.list(args);

        case 15: // <
            return Builtins._3C(args);

        case 16: // <=
            return Builtins._3C_3D(args);

        case 17: // =
            return Builtins._3D(args);

        case 18: // >=
            return Builtins._3E_3D(args);

        case 19: // >
            return Builtins._3E(args);

        case 21: // +
            return Builtins._2B(args);

        case 22: // -
            return Builtins._2D(args);

        case 23: // *
            return Builtins._2A(args);

        case 24: // /
            return Builtins._2F(args);

        case 53: // string-append
            return Builtins.string_2Dappend(args);

        case 62: // vector
            return Builtins.vector(args);

        default:
            throw new RuntimeException("unexpected Id");
        }
    }

    protected Arity getArity()
    { return Arity.atLeast(0); }

    public Code call(Registers state, List args)
        throws SchemeException
    { return checkedCall(args); }
}

class BuiltinThunks
    extends    ValueThunk
    implements BuiltinTable
{
    public final static String id
        = "$Id$";


    private final int    _id;
    private final String _name;

    BuiltinThunks(int id, String name)
    { _id = id; _name = name; }

    public String getName() { return _name; }

    public Function getFunc() { return this; }

    public void write(Writer destination)
        throws IOException
    {
        destination.write(
            "#[primitive " + _id + ": " + _name + "]"
        );
    }

    protected Value checkedCall()
        throws SchemeException
    {
        switch(_id) {
        case 81: // unique-id
            return Builtins.__unique_2Did();

        default:
            throw new RuntimeException("unexpected Id");
        }
    }
}

class BuiltinUnary
    extends    UnaryValueFunction
    implements BuiltinTable
{
    public final static String id
        = "$Id$";


    private final int    _id;
    private final String _name;

    BuiltinUnary(int id, String name)
    { _id = id; _name = name; }

    public String getName() { return _name; }

    public Function getFunc() { return this; }

    public void write(Writer destination)
        throws IOException
    {
        destination.write(
            "#[primitive " + _id + ": " + _name + "]"
        );
    }

    protected Value checkedCall(Value fst)
        throws SchemeException
    {
        switch(_id) {
        case 0: // length
            return Builtins.length(fst);

        case 3: // reverse
            return Builtins.reverse(fst);

        case 4: // read
            return Builtins.read(fst);

        case 8: // number?
            return Builtins.number_3F(fst);

        case 9: // complex?
            return Builtins.complex_3F(fst);

        case 10: // real?
            return Builtins.real_3F(fst);

        case 11: // rational?
            return Builtins.rational_3F(fst);

        case 12: // integer?
            return Builtins.integer_3F(fst);

        case 13: // exact?
            return Builtins.exact_3F(fst);

        case 14: // inexact?
            return Builtins.inexact_3F(fst);

        case 20: // zero?
            return Builtins.zero_3F(fst);

        case 25: // not
            return Builtins.not(fst);

        case 26: // boolean?
            return Builtins.boolean_3F(fst);

        case 27: // pair?
            return Builtins.pair_3F(fst);

        case 29: // car
            return Builtins.car(fst);

        case 30: // cdr
            return Builtins.cdr(fst);

        case 33: // null?
            return Builtins.null_3F(fst);

        case 34: // list?
            return Builtins.list_3F(fst);

        case 35: // symbol?
            return Builtins.symbol_3F(fst);

        case 36: // symbol->string
            return Builtins.symbol_2D_3Estring(fst);

        case 37: // string->symbol
            return Builtins.string_2D_3Esymbol(fst);

        case 38: // char?
            return Builtins.char_3F(fst);

        case 44: // char->integer
            return Builtins.char_2D_3Einteger(fst);

        case 45: // integer->char
            return Builtins.integer_2D_3Echar(fst);

        case 46: // char-upcase
            return Builtins.char_2Dupcase(fst);

        case 47: // char-downcase
            return Builtins.char_2Ddowncase(fst);

        case 48: // string?
            return Builtins.string_3F(fst);

        case 50: // string-length
            return Builtins.string_2Dlength(fst);

        case 54: // string-copy
            return Builtins.string_2Dcopy(fst);

        case 55: // string->list
            return Builtins.string_2D_3Elist(fst);

        case 56: // list->string
            return Builtins.list_2D_3Estring(fst);

        case 57: // vector?
            return Builtins.vector_3F(fst);

        case 59: // vector-length
            return Builtins.vector_2Dlength(fst);

        case 63: // vector->list
            return Builtins.vector_2D_3Elist(fst);

        case 64: // list->vector
            return Builtins.list_2D_3Evector(fst);

        case 65: // procedure?
            return Builtins.procedure_3F(fst);

        case 66: // scheme-report-environment
            return Builtins.scheme_2Dreport_2Denvironment(fst);

        case 67: // null-environment
            return Builtins.null_2Denvironment(fst);

        case 68: // port?
            return Builtins.port_3F(fst);

        case 69: // input-port?
            return Builtins.input_2Dport_3F(fst);

        case 70: // output-port?
            return Builtins.output_2Dport_3F(fst);

        case 71: // open-input-file
            return Builtins.open_2Dinput_2Dfile(fst);

        case 72: // open-output-file
            return Builtins.open_2Doutput_2Dfile(fst);

        case 73: // close-input-port
            return Builtins.close_2Dinput_2Dport(fst);

        case 74: // close-output-port
            return Builtins.close_2Doutput_2Dport(fst);

        case 75: // read-char
            return Builtins.read_2Dchar(fst);

        case 76: // peek-char
            return Builtins.peek_2Dchar(fst);

        case 77: // eof-object?
            return Builtins.eof_2Dobject_3F(fst);

        case 78: // char-ready?
            return Builtins.char_2Dready_3F(fst);

        case 82: // open-input-string
            return Builtins.__open_2Dinput_2Dstring(fst);

        default:
            throw new RuntimeException("unexpected Id");
        }
    }
}

class BuiltinBinary
    extends    BinaryValueFunction
    implements BuiltinTable
{
    public final static String id
        = "$Id$";


    private final int    _id;
    private final String _name;

    BuiltinBinary(int id, String name)
    { _id = id; _name = name; }

    public String getName() { return _name; }

    public Function getFunc() { return this; }

    public void write(Writer destination)
        throws IOException
    {
        destination.write(
            "#[primitive " + _id + ": " + _name + "]"
        );
    }

    protected Value checkedCall(Value fst, Value snd)
        throws SchemeException
    {
        switch(_id) {
        case 2: // write
            return Builtins.write(fst, snd);

        case 5: // eq?
            return Builtins.eq_3F(fst, snd);

        case 6: // eqv?
            return Builtins.eqv_3F(fst, snd);

        case 7: // equal?
            return Builtins.equal_3F(fst, snd);

        case 28: // cons
            return Builtins.cons(fst, snd);

        case 31: // set-car!
            return Builtins.set_2Dcar_21(fst, snd);

        case 32: // set-cdr!
            return Builtins.set_2Dcdr_21(fst, snd);

        case 39: // char<?
            return Builtins.char_3C_3F(fst, snd);

        case 40: // char<=?
            return Builtins.char_3C_3D_3F(fst, snd);

        case 41: // char=?
            return Builtins.char_3D_3F(fst, snd);

        case 42: // char>=?
            return Builtins.char_3E_3D_3F(fst, snd);

        case 43: // char>?
            return Builtins.char_3E_3F(fst, snd);

        case 49: // make-string
            return Builtins.make_2Dstring(fst, snd);

        case 51: // string-ref
            return Builtins.string_2Dref(fst, snd);

        case 58: // make-vector
            return Builtins.make_2Dvector(fst, snd);

        case 60: // vector-ref
            return Builtins.vector_2Dref(fst, snd);

        case 79: // display
            return Builtins.display(fst, snd);

        case 80: // write-char
            return Builtins.write_2Dchar(fst, snd);

        default:
            throw new RuntimeException("unexpected Id");
        }
    }
}

class BuiltinTernary
    extends    TernaryValueFunction
    implements BuiltinTable
{
    public final static String id
        = "$Id$";


    private final int    _id;
    private final String _name;

    BuiltinTernary(int id, String name)
    { _id = id; _name = name; }

    public String getName() { return _name; }

    public Function getFunc() { return this; }

    public void write(Writer destination)
        throws IOException
    {
        destination.write(
            "#[primitive " + _id + ": " + _name + "]"
        );
    }

    protected Value checkedCall(Value fst, Value snd, Value trd)
        throws SchemeException
    {
        switch(_id) {
        case 52: // string-set!
            return Builtins.string_2Dset_21(fst, snd, trd);

        case 61: // vector-set!
            return Builtins.vector_2Dset_21(fst, snd, trd);

        default:
            throw new RuntimeException("unexpected Id");
        }
    }
}

class BuiltinTableEntry
    implements BuiltinTable
{
    public final static String id
        = "$Id$";

    private final Function _func;
    private final String   _name;

    BuiltinTableEntry(Function func, String name)
    { _func = func; _name = name; }

    public String getName() { return _name; }

    public Function getFunc() { return _func; }
}


public interface BuiltinTable
{
    String id
        = "$Id$";


    String getName();
    Function getFunc();

    BuiltinTable[] builtins = {
        new BuiltinTableEntry(Builtins.append, "append"),
        new BuiltinTableEntry(Builtins.memq, "memq"),
        new BuiltinTableEntry(Builtins.memv, "memv"),
        new BuiltinTableEntry(Builtins.member, "member"),
        new BuiltinTableEntry(Builtins.assq, "assq"),
        new BuiltinTableEntry(Builtins.assv, "assv"),
        new BuiltinTableEntry(Builtins.assoc, "assoc"),
        new BuiltinTableEntry(Builtins.apply, "apply"),
        new BuiltinTableEntry(Builtins.call_2Dwith_2Dcurrent_2Dcontinuation, "call-with-current-continuation"),
        new BuiltinTableEntry(Builtins.dynamic_2Dwind, "dynamic-wind"),
        new BuiltinTableEntry(Builtins.eval, "eval"),
        new BuiltinTableEntry(Builtins.__spawn, "spawn"),
        new BuiltinTableEntry(Builtins.__y_2Dcombinator, "y-combinator"),
        new BuiltinUnary(0, "length"),
        new BuiltinRaw(1, "list"),
        new BuiltinBinary(2, "write"),
        new BuiltinUnary(3, "reverse"),
        new BuiltinUnary(4, "read"),
        new BuiltinBinary(5, "eq?"),
        new BuiltinBinary(6, "eqv?"),
        new BuiltinBinary(7, "equal?"),
        new BuiltinUnary(8, "number?"),
        new BuiltinUnary(9, "complex?"),
        new BuiltinUnary(10, "real?"),
        new BuiltinUnary(11, "rational?"),
        new BuiltinUnary(12, "integer?"),
        new BuiltinUnary(13, "exact?"),
        new BuiltinUnary(14, "inexact?"),
        new BuiltinRaw(15, "<"),
        new BuiltinRaw(16, "<="),
        new BuiltinRaw(17, "="),
        new BuiltinRaw(18, ">="),
        new BuiltinRaw(19, ">"),
        new BuiltinUnary(20, "zero?"),
        new BuiltinRaw(21, "+"),
        new BuiltinRaw(22, "-"),
        new BuiltinRaw(23, "*"),
        new BuiltinRaw(24, "/"),
        new BuiltinUnary(25, "not"),
        new BuiltinUnary(26, "boolean?"),
        new BuiltinUnary(27, "pair?"),
        new BuiltinBinary(28, "cons"),
        new BuiltinUnary(29, "car"),
        new BuiltinUnary(30, "cdr"),
        new BuiltinBinary(31, "set-car!"),
        new BuiltinBinary(32, "set-cdr!"),
        new BuiltinUnary(33, "null?"),
        new BuiltinUnary(34, "list?"),
        new BuiltinUnary(35, "symbol?"),
        new BuiltinUnary(36, "symbol->string"),
        new BuiltinUnary(37, "string->symbol"),
        new BuiltinUnary(38, "char?"),
        new BuiltinBinary(39, "char<?"),
        new BuiltinBinary(40, "char<=?"),
        new BuiltinBinary(41, "char=?"),
        new BuiltinBinary(42, "char>=?"),
        new BuiltinBinary(43, "char>?"),
        new BuiltinUnary(44, "char->integer"),
        new BuiltinUnary(45, "integer->char"),
        new BuiltinUnary(46, "char-upcase"),
        new BuiltinUnary(47, "char-downcase"),
        new BuiltinUnary(48, "string?"),
        new BuiltinBinary(49, "make-string"),
        new BuiltinUnary(50, "string-length"),
        new BuiltinBinary(51, "string-ref"),
        new BuiltinTernary(52, "string-set!"),
        new BuiltinRaw(53, "string-append"),
        new BuiltinUnary(54, "string-copy"),
        new BuiltinUnary(55, "string->list"),
        new BuiltinUnary(56, "list->string"),
        new BuiltinUnary(57, "vector?"),
        new BuiltinBinary(58, "make-vector"),
        new BuiltinUnary(59, "vector-length"),
        new BuiltinBinary(60, "vector-ref"),
        new BuiltinTernary(61, "vector-set!"),
        new BuiltinRaw(62, "vector"),
        new BuiltinUnary(63, "vector->list"),
        new BuiltinUnary(64, "list->vector"),
        new BuiltinUnary(65, "procedure?"),
        new BuiltinUnary(66, "scheme-report-environment"),
        new BuiltinUnary(67, "null-environment"),
        new BuiltinUnary(68, "port?"),
        new BuiltinUnary(69, "input-port?"),
        new BuiltinUnary(70, "output-port?"),
        new BuiltinUnary(71, "open-input-file"),
        new BuiltinUnary(72, "open-output-file"),
        new BuiltinUnary(73, "close-input-port"),
        new BuiltinUnary(74, "close-output-port"),
        new BuiltinUnary(75, "read-char"),
        new BuiltinUnary(76, "peek-char"),
        new BuiltinUnary(77, "eof-object?"),
        new BuiltinUnary(78, "char-ready?"),
        new BuiltinBinary(79, "display"),
        new BuiltinBinary(80, "write-char"),
        new BuiltinThunks(81, "unique-id"),
        new BuiltinUnary(82, "open-input-string"),
    };
}
