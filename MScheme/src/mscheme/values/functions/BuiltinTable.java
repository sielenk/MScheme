package mscheme.values.functions;

/* --- DON'T EDIT --- */
/* this file is generated by mscheme.values.functions.ParseBuiltins */

import java.io.Writer;
import java.io.IOException;

import mscheme.util.Arity;
import mscheme.machine.Registers;

import mscheme.values.*;

import mscheme.exceptions.*;


class BuiltinRaw
    extends    Function
    implements BuiltinTable
{
    public final static String CVS_ID
        = "$Id$";


    private final int    _id;
    private final String _name;

    BuiltinRaw(int id, String name)
    { _id = id; _name = name; }

    public String getName() { return _name; }

    public Function getFunc() { return this; }

    public void write(Writer destination)
        throws IOException
    {
        destination.write(
            "#[primitive " + _id + ": " + _name + "]"
        );
    }

    protected Object checkedCall(List args)
        throws SchemeException
    {
        switch(_id) {
        case 2: // list
            return Builtins.list(args);

        case 6: // vector
            return Builtins.vector(args);

        case 19: // <
            return Builtins._3C(args);

        case 20: // <=
            return Builtins._3C_3D(args);

        case 21: // =
            return Builtins._3D(args);

        case 22: // >=
            return Builtins._3E_3D(args);

        case 23: // >
            return Builtins._3E(args);

        case 25: // +
            return Builtins._2B(args);

        case 26: // -
            return Builtins._2D(args);

        case 27: // *
            return Builtins._2A(args);

        case 28: // /
            return Builtins._2F(args);

        case 55: // string-append
            return Builtins.string_2Dappend(args);

        default:
            throw new RuntimeException("unexpected Id");
        }
    }

    protected Arity getArity()
    { return Arity.atLeast(0); }

    public Object call(Registers state, List args)
        throws SchemeException
    { return checkedCall(args); }
}

class BuiltinThunks
    extends    ValueThunk
    implements BuiltinTable
{
    public final static String CVS_ID
        = "$Id$";


    private final int    _id;
    private final String _name;

    BuiltinThunks(int id, String name)
    { _id = id; _name = name; }

    public String getName() { return _name; }

    public Function getFunc() { return this; }

    public void write(Writer destination)
        throws IOException
    {
        destination.write(
            "#[primitive " + _id + ": " + _name + "]"
        );
    }

    protected Object checkedCall()
        throws SchemeException
    {
        switch(_id) {
        case 81: // unique-id
            return Builtins.__unique_2Did();

        default:
            throw new RuntimeException("unexpected Id");
        }
    }
}

class BuiltinUnary
    extends    UnaryValueFunction
    implements BuiltinTable
{
    public final static String CVS_ID
        = "$Id$";


    private final int    _id;
    private final String _name;

    BuiltinUnary(int id, String name)
    { _id = id; _name = name; }

    public String getName() { return _name; }

    public Function getFunc() { return this; }

    public void write(Writer destination)
        throws IOException
    {
        destination.write(
            "#[primitive " + _id + ": " + _name + "]"
        );
    }

    protected Object checkedCall(Object fst)
        throws SchemeException
    {
        switch(_id) {
        case 0: // length
            return Builtins.length(fst);

        case 3: // reverse
            return Builtins.reverse(fst);

        case 5: // read
            return Builtins.read(fst);

        case 8: // not
            return Builtins.not(fst);

        case 12: // number?
            return Builtins.number_3F(fst);

        case 13: // complex?
            return Builtins.complex_3F(fst);

        case 14: // real?
            return Builtins.real_3F(fst);

        case 15: // rational?
            return Builtins.rational_3F(fst);

        case 16: // integer?
            return Builtins.integer_3F(fst);

        case 17: // exact?
            return Builtins.exact_3F(fst);

        case 18: // inexact?
            return Builtins.inexact_3F(fst);

        case 24: // zero?
            return Builtins.zero_3F(fst);

        case 29: // boolean?
            return Builtins.boolean_3F(fst);

        case 30: // pair?
            return Builtins.pair_3F(fst);

        case 31: // car
            return Builtins.car(fst);

        case 32: // cdr
            return Builtins.cdr(fst);

        case 35: // null?
            return Builtins.null_3F(fst);

        case 36: // list?
            return Builtins.list_3F(fst);

        case 37: // symbol?
            return Builtins.symbol_3F(fst);

        case 38: // symbol->string
            return Builtins.symbol_2D_3Estring(fst);

        case 39: // string->symbol
            return Builtins.string_2D_3Esymbol(fst);

        case 40: // char?
            return Builtins.char_3F(fst);

        case 46: // char->integer
            return Builtins.char_2D_3Einteger(fst);

        case 47: // integer->char
            return Builtins.integer_2D_3Echar(fst);

        case 48: // char-upcase
            return Builtins.char_2Dupcase(fst);

        case 49: // char-downcase
            return Builtins.char_2Ddowncase(fst);

        case 50: // string?
            return Builtins.string_3F(fst);

        case 52: // string-length
            return Builtins.string_2Dlength(fst);

        case 56: // string-copy
            return Builtins.string_2Dcopy(fst);

        case 57: // string->list
            return Builtins.string_2D_3Elist(fst);

        case 58: // list->string
            return Builtins.list_2D_3Estring(fst);

        case 59: // vector?
            return Builtins.vector_3F(fst);

        case 61: // vector-length
            return Builtins.vector_2Dlength(fst);

        case 64: // vector->list
            return Builtins.vector_2D_3Elist(fst);

        case 65: // list->vector
            return Builtins.list_2D_3Evector(fst);

        case 66: // procedure?
            return Builtins.procedure_3F(fst);

        case 67: // scheme-report-environment
            return Builtins.scheme_2Dreport_2Denvironment(fst);

        case 68: // null-environment
            return Builtins.null_2Denvironment(fst);

        case 69: // port?
            return Builtins.port_3F(fst);

        case 70: // input-port?
            return Builtins.input_2Dport_3F(fst);

        case 71: // output-port?
            return Builtins.output_2Dport_3F(fst);

        case 72: // open-input-file
            return Builtins.open_2Dinput_2Dfile(fst);

        case 73: // open-output-file
            return Builtins.open_2Doutput_2Dfile(fst);

        case 74: // close-input-port
            return Builtins.close_2Dinput_2Dport(fst);

        case 75: // close-output-port
            return Builtins.close_2Doutput_2Dport(fst);

        case 76: // read-char
            return Builtins.read_2Dchar(fst);

        case 77: // peek-char
            return Builtins.peek_2Dchar(fst);

        case 78: // eof-object?
            return Builtins.eof_2Dobject_3F(fst);

        case 79: // char-ready?
            return Builtins.char_2Dready_3F(fst);

        case 82: // open-input-string
            return Builtins.__open_2Dinput_2Dstring(fst);

        default:
            throw new RuntimeException("unexpected Id");
        }
    }
}

class BuiltinBinary
    extends    BinaryValueFunction
    implements BuiltinTable
{
    public final static String CVS_ID
        = "$Id$";


    private final int    _id;
    private final String _name;

    BuiltinBinary(int id, String name)
    { _id = id; _name = name; }

    public String getName() { return _name; }

    public Function getFunc() { return this; }

    public void write(Writer destination)
        throws IOException
    {
        destination.write(
            "#[primitive " + _id + ": " + _name + "]"
        );
    }

    protected Object checkedCall(Object fst, Object snd)
        throws SchemeException
    {
        switch(_id) {
        case 1: // write
            return Builtins.write(fst, snd);

        case 4: // cons
            return Builtins.cons(fst, snd);

        case 7: // display
            return Builtins.display(fst, snd);

        case 9: // eq?
            return Builtins.eq_3F(fst, snd);

        case 10: // eqv?
            return Builtins.eqv_3F(fst, snd);

        case 11: // equal?
            return Builtins.equal_3F(fst, snd);

        case 33: // set-car!
            return Builtins.set_2Dcar_21(fst, snd);

        case 34: // set-cdr!
            return Builtins.set_2Dcdr_21(fst, snd);

        case 41: // char<?
            return Builtins.char_3C_3F(fst, snd);

        case 42: // char<=?
            return Builtins.char_3C_3D_3F(fst, snd);

        case 43: // char=?
            return Builtins.char_3D_3F(fst, snd);

        case 44: // char>=?
            return Builtins.char_3E_3D_3F(fst, snd);

        case 45: // char>?
            return Builtins.char_3E_3F(fst, snd);

        case 51: // make-string
            return Builtins.make_2Dstring(fst, snd);

        case 53: // string-ref
            return Builtins.string_2Dref(fst, snd);

        case 60: // make-vector
            return Builtins.make_2Dvector(fst, snd);

        case 62: // vector-ref
            return Builtins.vector_2Dref(fst, snd);

        case 80: // write-char
            return Builtins.write_2Dchar(fst, snd);

        default:
            throw new RuntimeException("unexpected Id");
        }
    }
}

class BuiltinTernary
    extends    TernaryValueFunction
    implements BuiltinTable
{
    public final static String CVS_ID
        = "$Id$";


    private final int    _id;
    private final String _name;

    BuiltinTernary(int id, String name)
    { _id = id; _name = name; }

    public String getName() { return _name; }

    public Function getFunc() { return this; }

    public void write(Writer destination)
        throws IOException
    {
        destination.write(
            "#[primitive " + _id + ": " + _name + "]"
        );
    }

    protected Object checkedCall(Object fst, Object snd, Object trd)
        throws SchemeException
    {
        switch(_id) {
        case 54: // string-set!
            return Builtins.string_2Dset_21(fst, snd, trd);

        case 63: // vector-set!
            return Builtins.vector_2Dset_21(fst, snd, trd);

        default:
            throw new RuntimeException("unexpected Id");
        }
    }
}

class BuiltinTableEntry
    implements BuiltinTable
{
    public final static String id
        = "$Id$";

    private final Function _func;
    private final String   _name;

    BuiltinTableEntry(Function func, String name)
    { _func = func; _name = name; }

    public String getName() { return _name; }

    public Function getFunc() { return _func; }
}


public interface BuiltinTable
{
    String id
        = "$Id$";


    String getName();
    Function getFunc();

    BuiltinTable[] builtins = {
        new BuiltinTableEntry(Builtins.append, "append"),
        new BuiltinTableEntry(Builtins.memq, "memq"),
        new BuiltinTableEntry(Builtins.memv, "memv"),
        new BuiltinTableEntry(Builtins.member, "member"),
        new BuiltinTableEntry(Builtins.assq, "assq"),
        new BuiltinTableEntry(Builtins.assv, "assv"),
        new BuiltinTableEntry(Builtins.assoc, "assoc"),
        new BuiltinTableEntry(Builtins.apply, "apply"),
        new BuiltinTableEntry(Builtins.call_2Dwith_2Dcurrent_2Dcontinuation, "call-with-current-continuation"),
        new BuiltinTableEntry(Builtins.eval, "eval"),
        new BuiltinTableEntry(Builtins.__spawn, "spawn"),
        new BuiltinTableEntry(Builtins.__y_2Dcombinator, "y-combinator"),
        new BuiltinUnary(0, "length"),
        new BuiltinBinary(1, "write"),
        new BuiltinRaw(2, "list"),
        new BuiltinUnary(3, "reverse"),
        new BuiltinBinary(4, "cons"),
        new BuiltinUnary(5, "read"),
        new BuiltinRaw(6, "vector"),
        new BuiltinBinary(7, "display"),
        new BuiltinUnary(8, "not"),
        new BuiltinBinary(9, "eq?"),
        new BuiltinBinary(10, "eqv?"),
        new BuiltinBinary(11, "equal?"),
        new BuiltinUnary(12, "number?"),
        new BuiltinUnary(13, "complex?"),
        new BuiltinUnary(14, "real?"),
        new BuiltinUnary(15, "rational?"),
        new BuiltinUnary(16, "integer?"),
        new BuiltinUnary(17, "exact?"),
        new BuiltinUnary(18, "inexact?"),
        new BuiltinRaw(19, "<"),
        new BuiltinRaw(20, "<="),
        new BuiltinRaw(21, "="),
        new BuiltinRaw(22, ">="),
        new BuiltinRaw(23, ">"),
        new BuiltinUnary(24, "zero?"),
        new BuiltinRaw(25, "+"),
        new BuiltinRaw(26, "-"),
        new BuiltinRaw(27, "*"),
        new BuiltinRaw(28, "/"),
        new BuiltinUnary(29, "boolean?"),
        new BuiltinUnary(30, "pair?"),
        new BuiltinUnary(31, "car"),
        new BuiltinUnary(32, "cdr"),
        new BuiltinBinary(33, "set-car!"),
        new BuiltinBinary(34, "set-cdr!"),
        new BuiltinUnary(35, "null?"),
        new BuiltinUnary(36, "list?"),
        new BuiltinUnary(37, "symbol?"),
        new BuiltinUnary(38, "symbol->string"),
        new BuiltinUnary(39, "string->symbol"),
        new BuiltinUnary(40, "char?"),
        new BuiltinBinary(41, "char<?"),
        new BuiltinBinary(42, "char<=?"),
        new BuiltinBinary(43, "char=?"),
        new BuiltinBinary(44, "char>=?"),
        new BuiltinBinary(45, "char>?"),
        new BuiltinUnary(46, "char->integer"),
        new BuiltinUnary(47, "integer->char"),
        new BuiltinUnary(48, "char-upcase"),
        new BuiltinUnary(49, "char-downcase"),
        new BuiltinUnary(50, "string?"),
        new BuiltinBinary(51, "make-string"),
        new BuiltinUnary(52, "string-length"),
        new BuiltinBinary(53, "string-ref"),
        new BuiltinTernary(54, "string-set!"),
        new BuiltinRaw(55, "string-append"),
        new BuiltinUnary(56, "string-copy"),
        new BuiltinUnary(57, "string->list"),
        new BuiltinUnary(58, "list->string"),
        new BuiltinUnary(59, "vector?"),
        new BuiltinBinary(60, "make-vector"),
        new BuiltinUnary(61, "vector-length"),
        new BuiltinBinary(62, "vector-ref"),
        new BuiltinTernary(63, "vector-set!"),
        new BuiltinUnary(64, "vector->list"),
        new BuiltinUnary(65, "list->vector"),
        new BuiltinUnary(66, "procedure?"),
        new BuiltinUnary(67, "scheme-report-environment"),
        new BuiltinUnary(68, "null-environment"),
        new BuiltinUnary(69, "port?"),
        new BuiltinUnary(70, "input-port?"),
        new BuiltinUnary(71, "output-port?"),
        new BuiltinUnary(72, "open-input-file"),
        new BuiltinUnary(73, "open-output-file"),
        new BuiltinUnary(74, "close-input-port"),
        new BuiltinUnary(75, "close-output-port"),
        new BuiltinUnary(76, "read-char"),
        new BuiltinUnary(77, "peek-char"),
        new BuiltinUnary(78, "eof-object?"),
        new BuiltinUnary(79, "char-ready?"),
        new BuiltinBinary(80, "write-char"),
        new BuiltinThunks(81, "unique-id"),
        new BuiltinUnary(82, "open-input-string"),
    };
}